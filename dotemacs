;;;; 1) Variables
(defvar *use-home* (concat (expand-file-name "~") "/"))
(defvar *plugin-path* (concat *use-home* ".emacs.d/plugins/"))
(defvar *tpl-path* (concat *use-home* ".emacs.d/templates/"))

(defvar *cl-path* (concat *use-home* ".emacs.d/common-lisp/"))
;;; Common Lisp Implementations
(defvar *sbcl* "sbcl")
(defvar *clisp* "clisp")
; (defvar *sbcl-git* (concat *cl-path* "bin/sbcl"))
; (defvar *alisp* (concat *cl-path* "bin/alisp"))
; (defvar *ccl* (concat *cl-path* "bin/ccl"))
;;; SLIME
(defvar *slime-path* (concat *cl-path* "slime/"))
;;; Common Lisp Documentations
(setq common-lisp-hyperspec-root (concat *cl-path* "docs/HyperSpec/"))

;;;; 2) Emacs default setup
;; Normally, we do not keep backup files
(setq make-backup-files nil)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(setq-default indent-tabs-mode nil)
(setq inhibit-startup-message t)
(column-number-mode t)
(line-number-mode t)
(show-paren-mode t)
(pc-selection-mode)
(delete-selection-mode t)
;; highlight text selection
(transient-mark-mode t)
;; turn on syntax highlighting
(global-font-lock-mode t)
;; Mode line: we want `buffer-name` + `default-directory`...
(setq-default mode-line-buffer-identification
              '("%b:" default-directory))
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)

;;; Editing
(setq-default show-trailing-whitespace t)
;; M-x delete-trailing-whitespace
(set-face-background 'trailing-whitespace "red")

;;;; 3) Emacs plugins
;; linum
; (global-linum-mode 1)

(setq load-path (append (list *plugin-path*) load-path))

;; M-x visit-tags-table; M-x taglist
;; cedet & ecb does this better, but their size really freaks me out
(require 'taglist)

(require 'sr-speedbar)
(setq sr-speedbar-right-side nil)
(setq sr-speedbar-skip-other-window-p t)
(setq sr-speedbar-auto-refresh t)
(setq sr-speedbar-max-width 30)
(setq speedbar-show-unknown-files t)
(setq speedbar-tag-hierarchy-method '(speedbar-prefix-group-tag-hierarchy))
(setq speedbar-sort-tags t)

;;;; 4) Ediff
(defconst ediff-ignore-similar-region t)
(defconst ediff-use-last-dir t)
(defconst ediff-diff-options " -b ")

;;;; 5) Common Lisp, SLIME, etc
(setq auto-mode-alist
      (append '(
                ("\\.lisp$" . lisp-mode)
                ("\\.lsp$" . lisp-mode)
                ("\\.asd$" . lisp-mode))
              auto-mode-alist))
(add-hook 'lisp-mode-hook
          (lambda ()
            (set (make-local-variable 'lisp-indent-function)
                 'common-lisp-indent-function)))

;;; SLIME
(setq load-path (append (list *slime-path*) load-path))
(setq inferior-lisp-program *sbcl*)
(setq slime-lisp-implementations
      `((sbcl (,*sbcl*) :coding-system utf-8-unix)
        ; (sbcl-git (,*sbcl-git*) :coding-system utf-8-unix)
        ; (clisp (,*clisp*) :coding-system utf-8-unix)
        ; (alisp (,*alisp*) :coding-system utf-8-unix)
        ; (ccl (,*ccl*) :coding-system utf-8-unix)
        ))
(require 'slime)
(slime-setup '(slime-fancy))
(add-hook 'slime-mode-hook
          (lambda ()
            (unless (slime-connected-p)
              (save-excursion (slime)))))

;;; Common Lisp Editing
(defun lisp-indent-or-complete (&optional arg)
  (interactive "p")
  (if (or (looking-back "^\\s-*") (bolp))
      (call-interactively 'lisp-indent-line)
    (call-interactively 'slime-indent-and-complete-symbol)))
(eval-after-load "lisp-mode"
  '(progn
     (define-key lisp-mode-map (kbd "TAB") 'lisp-indent-or-complete)
     (define-key lisp-mode-map "\C-r" 'forward-char)))

;; Normally, we prefer google-chrome
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")

;;;; Common Lisp Copyright
(setq auto-insert-directory *tpl-path*)
;; Don't ask, just do the auto insertion
(setq auto-insert-query nil)
(define-auto-insert 'lisp-mode "lisp.tpl")
(add-hook 'find-file-hooks 'auto-insert)
